package Map;

import java.util.*;

/*
Dados as seguintes informações sobre meus livros favoritos e seus autores crie um dicinário e o ordene.
Exibir (Nome Autor - Nome Livro)

Autor = Hawking, Stephen - Livro = Nome: Uma Breve História do Tempo. Páginas: 256
Autor = Duhigg, Charles - Livro = Nome: O Poder do Hábito. Páginas: 408
Autor = Harari, Yuval Noah - Livro = Nome: 21 Lições Para o Século 21. Páginas: 432

 */


public class ExemploMap_2 {

    public static void main(String[] args) {

        System.out.println("--\tOrdem Aleatória\t--");
        Map<String, Livro> livrosPreferidos = new HashMap<>(){{
            put("Hawking, Stephen", new Livro("Uma Breve História do Tempo", 256));
            put("Duhigg, Charles", new Livro("O Poder do Hábito", 408));
            put("Harari, Yuval Noah", new Livro("21 Lições Para o Século 21", 432));

        }};

        for (Map.Entry<String, Livro> livro : livrosPreferidos.entrySet()) {

            System.out.println(livro.getKey() + " -> " + livro.getValue().getNome());
        }

        System.out.println("\n--\tOrdem de Inserção\t--");
        Map<String, Livro> livrosPreferidos1 = new LinkedHashMap<>(){{
            put("Hawking, Stephen", new Livro("Uma Breve História do Tempo", 256));
            put("Duhigg, Charles", new Livro("O Poder do Hábito", 408));
            put("Harari, Yuval Noah", new Livro("21 Lições Para o Século 21", 432));

        }};

        for (Map.Entry<String, Livro> livro1 : livrosPreferidos1.entrySet()) {

            System.out.println(livro1.getKey() + " -> " + livro1.getValue().getNome());

        }

        System.out.println("\n--\tOrdem Alfabética de Autores\t--");
        Map<String, Livro> livrosPreferidos2 = new TreeMap<>(livrosPreferidos);

        for (Map.Entry<String, Livro> livro2 : livrosPreferidos2.entrySet()) {
            System.out.println(livro2.getKey() + " -> " +livro2.getValue().getNome());

        }

        System.out.println("\n--\tOrdem Alfabética dos Livros\t--");
        Set<Map.Entry<String, Livro>> livrosPreferidos3 = new TreeSet<>(new ComparatorNome());
        livrosPreferidos3.addAll(livrosPreferidos.entrySet());

        for (Map.Entry<String, Livro> livro3 : livrosPreferidos3) {

            System.out.println(livro3.getValue().getNome() + " -> " + livro3.getKey());

        }

        System.out.println("\n--\tOrdem número de Páginas\t--");
        Set<Map.Entry<String, Livro>> livrosPreferidos4 = new TreeSet<>(new ComparationPaginas());
        livrosPreferidos4.addAll(livrosPreferidos.entrySet());

        for (Map.Entry<String, Livro> livro4 : livrosPreferidos4) {

            System.out.println(livro4.getValue().getNome() + " -> " + livro4.getValue().getPaginas() + " páginas.");

        }

    }
}

class Livro {
    private String nome;
    private Integer paginas;

    public Livro(String nome, Integer paginas) {
        this.nome = nome;
        this.paginas = paginas;

    }

    public String getNome() {
        return nome;
    }

    public Integer getPaginas() {
        return paginas;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Livro livro = (Livro) o;
        return nome.equals(livro.nome) && paginas.equals(livro.paginas);
    }

    @Override
    public int hashCode() {
        return Objects.hash(nome, paginas);
    }

    @Override
    public String toString() {
        return "Livro{" +
                "nome='" + nome + '\'' +
                ", paginas=" + paginas +
                '}';
    }
}

class ComparatorNome implements Comparator<Map.Entry<String, Livro>> {

    @Override
    public int compare(Map.Entry<String, Livro> l1, Map.Entry<String, Livro> l2) {
        return l1.getValue().getNome().compareToIgnoreCase(l2.getValue().getNome());

    }
}

class ComparationPaginas implements Comparator<Map.Entry<String, Livro>> {

    @Override
    public int compare(Map.Entry<String, Livro> p1, Map.Entry<String, Livro> p2) {
        return p1.getValue().getPaginas().compareTo(p2.getValue().getPaginas());

    }
}
